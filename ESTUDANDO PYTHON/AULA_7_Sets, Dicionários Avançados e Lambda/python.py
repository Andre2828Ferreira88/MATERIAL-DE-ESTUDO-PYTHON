#üîπ 1. Sets (Conjuntos)
#Um set √© como uma lista, mas:
#N√£o tem ordem
#N√£o aceita elementos repetidos

frutas = {"ma√ß√£", "banana", "laranja", "ma√ß√£"}
print(frutas) # {'ma√ß√£', 'banana', 'laranja'} ‚Üí a ma√ß√£ repetida sumiu

#Outras op√ß√µes

A = {1,2,3,4}
B = {3,4,5,6}

print(A | B ) # uni√£o: {1,2,3,4,5,6}
print(A & B)  # interse√ß√£o: {3,4}
print(A - B)  # diferen√ßa: {1,2}

#üîπ 2. Dicion√°rios Avan√ßados

#J√° usamos dicion√°rio, 
#mas agora vamos manipular mais fundo.

aluno = {
    "nome": "Andr√©",
    "idade" : 19,
    "notas" : [7.5 , 8.0 , 9.2]
}

print(aluno['nome'])
print(sum(aluno['notas']) / len(aluno["notas"])) #media

# üîπ 3. Fun√ß√µes Lambda
# Uma lambda √© uma fun√ß√£o pequena em uma linha s√≥.

dobro = lambda x: x * 2
print(dobro(5)) #10

3##################################################################
# Usada muito com map, filter e sorted:

numeros = [1,2,3,4,5]

dobrados = list(map(lambda x: x*2, numeros))
print(dobrados) # [2,4,6,8,10]

pares = list(filter(lambda x: x%2 == 0, numeros))
print(pares) #[2,4]

nomes = ['andre', 'jefferson', 'galego']
ordenados = sorted(nomes, key=lambda nome: len(nome))
print(ordenados) # ['andre', 'galego', 'Jefferson']